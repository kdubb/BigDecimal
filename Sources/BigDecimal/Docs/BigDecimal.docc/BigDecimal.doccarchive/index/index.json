{"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/rawsignificand","title":"RawSignificand","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(_:)-8m3u","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(_:)-2988l","title":"init<Source>(Source)","type":"init"}],"title":"DecimalFloatingPoint Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(_:)-31s3n","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(_:rounding:)","title":"init<Source>(Source, rounding: RoundingRule)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(exactly:)-58sdf","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(exactly:)-5xe57","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(exactly:)-9ykft","title":"init?<Source>(exactly: Source)","type":"init"}],"title":"DecimalFloatingPoint Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(exactly:)-9aknw","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(sign:exponentbitpattern:significandbitpattern:)","title":"init(sign: Sign, exponentBitPattern: Int, significandBitPattern: RawSignificand)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/init(signof:magnitudeof:)","title":"init(signOf: Self, magnitudeOf: Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/decade","title":"var decade: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/exponentbitpattern","title":"var exponentBitPattern: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/significandbitpattern","title":"var significandBitPattern: RawSignificand","type":"property"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/significanddigitcount-swift.property","title":"var significandDigitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/exponentbitcount","title":"static var exponentBitCount: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/radix","title":"static var radix: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/significanddigitcount-swift.type.property","title":"static var significandDigitCount: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/random(in:)-974em","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/random(in:)-f0rr","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/random(in:using:)-1jn6r","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimalfloatingpoint\/random(in:using:)-3sbqu","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimalfloatingpoint","title":"DecimalFloatingPoint","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/poweriterator\/calculatenextpower()","title":"func calculateNextPower()","type":"method"},{"path":"\/documentation\/bigdecimal\/poweriterator\/getcurrentpower()","title":"func getCurrentPower() -> BigDecimal","type":"method"}],"path":"\/documentation\/bigdecimal\/poweriterator","title":"PowerIterator","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/init()","title":"init()","type":"init"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/seriescalculator\/init(_:)-4vmv3","title":"init(Bool)","type":"init"}],"title":"SeriesCalculator Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/seriescalculator\/init(_:)-3mnwt","title":"init(Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/factors","title":"var factors: [BigInt.BFraction]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/seriescalculator\/addfactor(_:)-1e8ya","title":"func addFactor(BigInt.BFraction)","type":"method"}],"title":"SeriesCalculator Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/seriescalculator\/addfactor(_:)-leer","title":"func addFactor(BigRational)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/seriescalculator\/calculate(_:_:)-23zsk","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"}],"title":"SeriesCalculator Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/seriescalculator\/calculate(_:_:)-87bbo","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"children":[{"children":[{"path":"\/documentation\/bigdecimal\/seriescalculator\/getfactor(_:)-4v6l7","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"title":"SeriesCalculator Implementations","type":"groupMarker"}],"path":"\/documentation\/bigdecimal\/seriescalculator\/getfactor(_:)-6oudd","title":"func getFactor(Int) -> BigRational","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/seriescalculator\/bigrational","title":"SeriesCalculator.BigRational","type":"typealias"}],"path":"\/documentation\/bigdecimal\/seriescalculator","title":"SeriesCalculator","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/asincalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/asincalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/asincalculator\/factors","title":"var factors: [BigRational]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/asincalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/asincalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/asincalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/asincalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/asincalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/asincalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/asincalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/asincalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/asincalculator","title":"AsinCalculator","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/!=(_:_:)-67p6m","title":"static func != (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/**(_:_:)","title":"static func ** (`Self`, Int) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-8ad6z","title":"static func % (`Self`, `Self`) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-97e1s","title":"static func %= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-1mhig","title":"init(Data)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-5afym","title":"init(Double)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-cqpn","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-vagt","title":"init(String)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:_:)-59hii","title":"init(UInt128, Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:_:)-5tjy5","title":"init(UInt32, Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:_:)-6kiji","title":"init(UInt64, Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:_:)-96d3g","title":"init(Int, Int)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:_:)-zcde","title":"init(BInt, Int)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/abs","title":"var abs: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/digits","title":"var digits: BInt","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/precision-swift.property","title":"var precision: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/signum","title":"var signum: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/trim","title":"var trim: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/add(_:_:)-4bg55","title":"func add(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/add(_:_:)-z1yx","title":"func add<T>(T, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdata()","title":"func asData() -> Data","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdecimal()","title":"func asDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdecimal128(_:)","title":"func asDecimal128(Encoding) -> UInt128","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdecimal32(_:)","title":"func asDecimal32(Encoding) -> UInt32","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdecimal64(_:)","title":"func asDecimal64(Encoding) -> UInt64","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asdouble()","title":"func asDouble() -> Double","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asfloat()","title":"func asFloat() -> Float","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asint()","title":"func asInt<I>() -> I?","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asstring(_:)","title":"func asString(DisplayMode) -> String","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/divide(_:_:)-1scf1","title":"func divide(`Self`, Rounding?) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/divide(_:_:)-3a8ny","title":"func divide<T>(T, Rounding?) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/fma(_:_:_:)","title":"func fma(`Self`, `Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/multiply(_:_:)-2eq3l","title":"func multiply(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/multiply(_:_:)-3o0wr","title":"func multiply<T>(T, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pow(_:_:)-swift.method","title":"func pow(Int, Rounding?) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/quantize(_:_:)","title":"func quantize(`Self`, RoundingRule) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/quotientandremainder(_:)-63p2w","title":"func quotientAndRemainder(`Self`) -> (quotient: `Self`, remainder: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/quotientandremainder(_:)-7hups","title":"func quotientAndRemainder(Int) -> (quotient: `Self`, remainder: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/round(_:)-z5w8","title":"func round(Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/scale(_:)","title":"func scale(Int) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/subtract(_:_:)-5c53y","title":"func subtract<T>(T, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/subtract(_:_:)-73dat","title":"func subtract(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/withexponent(_:_:)","title":"func withExponent(Int, RoundingRule) -> BigDecimal","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/infinity","title":"static let infinity: BigDecimal","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/maxdigits","title":"static let maxDigits: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/maxexp","title":"static let maxExp: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/mc","title":"static var mc: Rounding","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/nan","title":"static let nan: BigDecimal","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/nanflag","title":"static var nanFlag: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/one","title":"static let one: BigDecimal","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/precision-swift.type.property","title":"static var precision: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/signalingnan","title":"static let signalingNaN: BigDecimal","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/ten","title":"static let ten: BigDecimal","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/zero-fj7w","title":"static let zero: BigDecimal","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acos(_:)","title":"static func acos(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acos(_:_:)","title":"static func acos(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acosh(_:)","title":"static func acosh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acosh(_:_:)","title":"static func acosh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acot(_:_:)","title":"static func acot(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/acoth(_:_:)","title":"static func acoth(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asin(_:)","title":"static func asin(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asin(_:_:)","title":"static func asin(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asinh(_:)","title":"static func asinh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/asinh(_:_:)","title":"static func asinh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atan(_:)","title":"static func atan(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atan(_:_:)","title":"static func atan(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atan2(_:_:_:)","title":"static func atan2(`Self`, `Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atan2(y:x:)","title":"static func atan2(y: BigDecimal, x: BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atanh(_:)","title":"static func atanh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/atanh(_:_:)","title":"static func atanh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/bernoulli(_:_:)","title":"static func bernoulli(Int, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/cos(_:)","title":"static func cos(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/cos(_:_:)","title":"static func cos(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/cosh(_:)","title":"static func cosh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/cosh(_:_:)","title":"static func cosh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/cot(_:_:)","title":"static func cot(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/coth(_:_:)","title":"static func coth(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/erf(_:)","title":"static func erf(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/erfc(_:)","title":"static func erfc(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exp(_:)","title":"static func exp(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exp(_:_:)","title":"static func exp(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exp2(_:)","title":"static func exp2(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/expminusone(_:)","title":"static func expMinusOne(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/factorial(_:)","title":"static func factorial(Int) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/factorial(_:_:)","title":"static func factorial(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/fractionalpart(_:)","title":"static func fractionalPart(`Self`) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/gamma(_:)","title":"static func gamma(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/gamma(_:_:)","title":"static func gamma(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/getspougefactorialconstants(_:)","title":"static func getSpougeFactorialConstants(Int) -> [BigDecimal]","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/hypot(_:_:)","title":"static func hypot(BigDecimal, BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/integralpart(_:)","title":"static func integralPart(`Self`) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isdoublevalue(_:)","title":"static func isDoubleValue(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isintvalue(_:)","title":"static func isIntValue(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log(_:)","title":"static func log(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log(_:_:)","title":"static func log(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log(oneplus:)","title":"static func log(onePlus: BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log10(_:)","title":"static func log10(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log10(_:_:)","title":"static func log10(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log2(_:)","title":"static func log2(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/log2(_:_:)","title":"static func log2(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/loggamma(_:)","title":"static func logGamma(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pi(_:)","title":"static func pi(Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pow(_:_:)-swift.type.method-155rn","title":"static func pow(BigDecimal, BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pow(_:_:)-swift.type.method-hpok","title":"static func pow(BigDecimal, Int) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pow(_:_:_:)","title":"static func pow(`Self`, `Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/root(_:_:)","title":"static func root(BigDecimal, Int) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/root(_:_:_:)","title":"static func root(`Self`, `Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sin(_:)","title":"static func sin(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sin(_:_:)","title":"static func sin(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sinh(_:)","title":"static func sinh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sinh(_:_:)","title":"static func sinh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sqrt(_:_:)","title":"static func sqrt(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/tan(_:)","title":"static func tan(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/tan(_:_:)","title":"static func tan(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/tanh(_:)","title":"static func tanh(BigDecimal) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/tanh(_:_:)","title":"static func tanh(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/todegrees(_:_:)","title":"static func toDegrees(`Self`, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/toradians(_:_:)","title":"static func toRadians(`Self`, Rounding) -> BigDecimal","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/engineering","title":"case engineering","type":"case"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/plain","title":"case plain","type":"case"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/scientific","title":"case scientific","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/displaymode","title":"BigDecimal.DisplayMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding\/bid","title":"case bid","type":"case"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding\/dpd","title":"case dpd","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/encoding","title":"BigDecimal.Encoding","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/+(_:_:)","title":"static func + (`Self`, `Self`) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/-(_:_:)","title":"static func - (`Self`, `Self`) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/zero-8fwyc","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/'...(_:)-2vyj9","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/'...(_:)-9cfbe","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-27ue3","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-2bwrk","title":"static func > (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-2dbvb","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-3b94v","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-81kr3","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_(_:_:)-kfnz","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-44lvx","title":"static func <= (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-4ljd1","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-6w9uk","title":"static func >= (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-78c7h","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-9aqr5","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/_=(_:_:)-9k9k7","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-4pkfb","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:rounding:)","title":"init<Source>(Source, rounding: RoundingRule)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(exactly:)-3dbch","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(exactly:)-t1fj","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(sign:exponentbitpattern:significandbitpattern:)","title":"init(sign: Sign, exponentBitPattern: Int, significandBitPattern: BigInt.BInt)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(signof:magnitudeof:)-8gptb","title":"init(signOf: Self, magnitudeOf: Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/decade","title":"var decade: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exponentbitpattern","title":"var exponentBitPattern: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/significandbitpattern","title":"var significandBitPattern: BInt","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/significanddigitcount-swift.property","title":"var significandDigitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/exponentbitcount","title":"static var exponentBitCount: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/radix-ddzn","title":"static var radix: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/significanddigitcount-swift.type.property","title":"static var significandDigitCount: Int","type":"property"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/decimalfloatingpoint-implementations","title":"DecimalFloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/!=(_:_:)-8gata","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/==(_:_:)-2ua2o","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/==(_:_:)-60ee1","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/==(_:_:)-7bh3q","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/\/(_:_:)","title":"static func \/ (`Self`, `Self`) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/\/=(_:_:)","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(_:)-97p4i","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(sign:exponent:significand:)","title":"init(sign: FloatingPointSign, exponent: Int, significand: `Self`)","type":"init"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(signof:magnitudeof:)-331gk","title":"init(signOf: `Self`, magnitudeOf: `Self`)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/iscanonical","title":"var isCanonical: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isfinite","title":"var isFinite: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isinfinite","title":"var isInfinite: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isnan","title":"var isNaN: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isnormal","title":"var isNormal: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/issignalingnan","title":"var isSignalingNaN: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/issubnormal","title":"var isSubnormal: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/nextup","title":"var nextUp: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/sign","title":"var sign: FloatingPointSign","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/significand","title":"var significand: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/ulp","title":"var ulp: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/addproduct(_:_:)","title":"func addProduct(`Self`, `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isequal(to:)","title":"func isEqual(to: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/isless(than:)","title":"func isLess(than: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/round(_:)-3zday","title":"func round(FloatingPointRoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/leastnormalmagnitude","title":"static var leastNormalMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/pi","title":"static var pi: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/radix-8g74z","title":"static var radix: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/maximum(_:_:)-1gq49","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/maximum(_:_:)-2ziug","title":"static func maximum(`Self`, `Self`) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/minimum(_:_:)-6ld41","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/minimum(_:_:)-76idz","title":"static func minimum(`Self`, `Self`) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/*(_:_:)","title":"static func * (`Self`, `Self`) -> BigDecimal","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/init(exactly:)-3psdb","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/-(_:)-25o07","title":"static func - (Self) -> Self","type":"op"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/-(_:)-7k0vy","title":"static func - (`Self`) -> BigDecimal","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/advanced(by:)","title":"func advanced(by: `Self`) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/bigdecimal\/distance(to:)","title":"func distance(to: `Self`) -> BigDecimal","type":"method"}],"path":"\/documentation\/bigdecimal\/bigdecimal\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/bigdecimal","title":"BigDecimal","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coscalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coscalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/coscalculator\/factors","title":"var factors: [BigInt.BFraction]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coscalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/coscalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/coscalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coscalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coscalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/coscalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/coscalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/coscalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/coscalculator","title":"CosCalculator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/factors","title":"var factors: [BigRational]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/coshcalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/coshcalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/coshcalculator","title":"CoshCalculator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(bid:)","title":"init(bid: UInt128)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(bitpattern:encoding:)","title":"init(bitPattern: RawSignificand, encoding: ID.Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/add(other:rounding:)","title":"func add(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/addproduct(_:_:rounding:)","title":"func addProduct(`Self`, `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/adding(other:rounding:)","title":"func adding(other: `Self`, rounding: RoundingRule) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/addingproduct(_:_:rounding:)","title":"func addingProduct(`Self`, `Self`, rounding: RoundingRule) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/bitpattern(_:)","title":"func bitPattern(ID.Encoding) -> RawSignificand","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/divide(by:rounding:)","title":"func divide(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/divided(by:rounding:)","title":"func divided(by: `Self`, rounding: RoundingRule) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/formsquareroot(rounding:)","title":"func formSquareRoot(rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/multiplied(by:rounding:)","title":"func multiplied(by: `Self`, rounding: RoundingRule) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/multiply(by:rounding:)","title":"func multiply(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/squareroot(rounding:)","title":"func squareRoot(rounding: RoundingRule) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/subtract(other:rounding:)","title":"func subtract(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/subtracting(other:rounding:)","title":"func subtracting(other: `Self`, rounding: RoundingRule) -> Decimal128","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/id","title":"Decimal128.ID","type":"typealias"},{"path":"\/documentation\/bigdecimal\/decimal128\/rawsignificand","title":"Decimal128.RawSignificand","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/+(_:_:)","title":"static func + (`Self`, `Self`) -> Decimal128","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/-(_:_:)","title":"static func - (`Self`, `Self`) -> Decimal128","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/zero-7qlfc","title":"static var zero: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/zero-8w4xn","title":"static var zero: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal128\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/'...(_:)-6uefw","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/'...(_:)-8ui4s","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-4b9j9","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-4sfh","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-5g5r","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-73fr9","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-7kmaz","title":"static func > (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_(_:_:)-7yj3t","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_=(_:_:)-2u4sb","title":"static func >= (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_=(_:_:)-2yzet","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_=(_:_:)-6ozw1","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_=(_:_:)-89s8v","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/_=(_:_:)-8n9po","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal128\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal128\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(_:)-28drt","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(_:)-9kedy","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(_:rounding:)","title":"init<Source>(Source, rounding: RoundingRule)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(exactly:)-1mg4i","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(exactly:)-2nwoa","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(exactly:)-60s4","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(signof:magnitudeof:)","title":"init(signOf: Self, magnitudeOf: Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/decade","title":"var decade: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/significanddigitcount","title":"var significandDigitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/radix","title":"static var radix: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/random(in:)-71re2","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/random(in:)-7nsg5","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/random(in:using:)-7pt1y","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/random(in:using:)-rc8g","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal128\/decimalfloatingpoint-implementations","title":"DecimalFloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(sign:exponentbitpattern:significandbitpattern:)","title":"init(sign: Sign, exponentBitPattern: Int, significandBitPattern: RawSignificand)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/decimaltype-implementations","title":"DecimalType Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/==(_:_:)-5560e","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/==(_:_:)-7jkjm","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/==(_:_:)-9t34i","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal128\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/*(_:_:)","title":"static func * (`Self`, `Self`) -> Decimal128","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/\/(_:_:)","title":"static func \/ (`Self`, `Self`) -> Decimal128","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal128\/\/=(_:_:)","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(sign:exponent:significand:)","title":"init(sign: Sign, exponent: Int, significand: `Self`)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/nextup","title":"var nextUp: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/significand","title":"var significand: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/ulp","title":"var ulp: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/addproduct(_:_:)","title":"func addProduct(`Self`, `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/isequal(to:)","title":"func isEqual(to: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/isless(than:)","title":"func isLess(than: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/negate()-4sv60","title":"func negate()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/round(_:)","title":"func round(RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/infinity","title":"static var infinity: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/leastnormalmagnitude","title":"static var leastNormalMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/pi","title":"static var pi: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal128\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/maximum(_:_:)","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/minimum(_:_:)","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal128\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/init(_:)-bvuo","title":"init?(String)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal128\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal128\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/-(_:)","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/negate()-3zqkh","title":"func negate()","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal128\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal128\/advanced(by:)","title":"func advanced(by: `Self`) -> Decimal128","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal128\/distance(to:)","title":"func distance(to: `Self`) -> Decimal128","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal128\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/decimal128","title":"Decimal128","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(_:)-15epx","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(bitpattern:encoding:)","title":"init(bitPattern: RawSignificand, encoding: ID.Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/add(other:rounding:)","title":"func add(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/addproduct(_:_:rounding:)","title":"func addProduct(`Self`, `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/adding(other:rounding:)","title":"func adding(other: `Self`, rounding: RoundingRule) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/addingproduct(_:_:rounding:)","title":"func addingProduct(`Self`, `Self`, rounding: RoundingRule) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/bitpattern(_:)","title":"func bitPattern(ID.Encoding) -> RawSignificand","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/divide(by:rounding:)","title":"func divide(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/divided(by:rounding:)","title":"func divided(by: `Self`, rounding: RoundingRule) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/formsquareroot(rounding:)","title":"func formSquareRoot(rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/multiplied(by:rounding:)","title":"func multiplied(by: `Self`, rounding: RoundingRule) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/multiply(by:rounding:)","title":"func multiply(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/squareroot(rounding:)","title":"func squareRoot(rounding: RoundingRule) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/subtract(other:rounding:)","title":"func subtract(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/subtracting(other:rounding:)","title":"func subtracting(other: `Self`, rounding: RoundingRule) -> Decimal32","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/id","title":"Decimal32.ID","type":"typealias"},{"path":"\/documentation\/bigdecimal\/decimal32\/rawbitpattern","title":"Decimal32.RawBitPattern","type":"typealias"},{"path":"\/documentation\/bigdecimal\/decimal32\/rawsignificand","title":"Decimal32.RawSignificand","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/+(_:_:)","title":"static func + (`Self`, `Self`) -> Decimal32","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/-(_:_:)","title":"static func - (`Self`, `Self`) -> Decimal32","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/zero-1f3tt","title":"static var zero: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/zero-63dsi","title":"static var zero: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal32\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/'...(_:)-5lgrc","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/'...(_:)-8fycl","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-31tax","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-3meo0","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-4kuje","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-5d9kv","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-7g2ye","title":"static func > (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_(_:_:)-8m5eu","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_=(_:_:)-1wr6x","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_=(_:_:)-4rpov","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_=(_:_:)-7fixh","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_=(_:_:)-811ht","title":"static func >= (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/_=(_:_:)-8r746","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal32\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal32\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(_:)-2ax9m","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(_:)-6do58","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(_:rounding:)","title":"init<Source>(Source, rounding: RoundingRule)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(exactly:)-3277s","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(exactly:)-3qco2","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(exactly:)-7onef","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(signof:magnitudeof:)","title":"init(signOf: Self, magnitudeOf: Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/decade","title":"var decade: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/significanddigitcount","title":"var significandDigitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/radix","title":"static var radix: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/random(in:)-3akit","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/random(in:)-71p4","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/random(in:using:)-4w7uo","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/random(in:using:)-503eg","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal32\/decimalfloatingpoint-implementations","title":"DecimalFloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(sign:exponentbitpattern:significandbitpattern:)","title":"init(sign: Sign, exponentBitPattern: Int, significandBitPattern: RawSignificand)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/decimaltype-implementations","title":"DecimalType Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/==(_:_:)-1sac8","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/==(_:_:)-4krog","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/==(_:_:)-5zaz6","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal32\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/*(_:_:)","title":"static func * (`Self`, `Self`) -> Decimal32","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/\/(_:_:)","title":"static func \/ (`Self`, `Self`) -> Decimal32","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal32\/\/=(_:_:)","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(sign:exponent:significand:)","title":"init(sign: Sign, exponent: Int, significand: `Self`)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/nextup","title":"var nextUp: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/significand","title":"var significand: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/ulp","title":"var ulp: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/addproduct(_:_:)","title":"func addProduct(`Self`, `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/isequal(to:)","title":"func isEqual(to: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/isless(than:)","title":"func isLess(than: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/negate()-7y1n3","title":"func negate()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/round(_:)","title":"func round(RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/infinity","title":"static var infinity: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/leastnormalmagnitude","title":"static var leastNormalMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/pi","title":"static var pi: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal32\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/maximum(_:_:)","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/minimum(_:_:)","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal32\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/init(_:)-300tg","title":"init?(String)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal32\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal32\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/-(_:)","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/negate()-5q8y7","title":"func negate()","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal32\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal32\/advanced(by:)","title":"func advanced(by: `Self`) -> Decimal32","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal32\/distance(to:)","title":"func distance(to: `Self`) -> Decimal32","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal32\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/decimal32","title":"Decimal32","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(bid:)","title":"init(bid: UInt64)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(bitpattern:encoding:)","title":"init(bitPattern: RawSignificand, encoding: ID.Encoding)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/add(other:rounding:)","title":"func add(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/addproduct(_:_:rounding:)","title":"func addProduct(`Self`, `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/adding(other:rounding:)","title":"func adding(other: `Self`, rounding: RoundingRule) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/addingproduct(_:_:rounding:)","title":"func addingProduct(`Self`, `Self`, rounding: RoundingRule) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/bitpattern(_:)","title":"func bitPattern(ID.Encoding) -> RawSignificand","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/divide(by:rounding:)","title":"func divide(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/divided(by:rounding:)","title":"func divided(by: `Self`, rounding: RoundingRule) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/formsquareroot(rounding:)","title":"func formSquareRoot(rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/multiplied(by:rounding:)","title":"func multiplied(by: `Self`, rounding: RoundingRule) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/multiply(by:rounding:)","title":"func multiply(by: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/squareroot(rounding:)","title":"func squareRoot(rounding: RoundingRule) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/subtract(other:rounding:)","title":"func subtract(other: `Self`, rounding: RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/subtracting(other:rounding:)","title":"func subtracting(other: `Self`, rounding: RoundingRule) -> Decimal64","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/id","title":"Decimal64.ID","type":"typealias"},{"path":"\/documentation\/bigdecimal\/decimal64\/rawsignificand","title":"Decimal64.RawSignificand","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/+(_:_:)","title":"static func + (`Self`, `Self`) -> Decimal64","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/-(_:_:)","title":"static func - (`Self`, `Self`) -> Decimal64","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/zero-1x0ge","title":"static var zero: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/zero-3rnlv","title":"static var zero: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal64\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/'...(_:)-62au3","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/'...(_:)-8wr4a","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-2jt1i","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-2lkk6","title":"static func > (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-38hg5","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-3w00b","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-4b911","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_(_:_:)-5u3mc","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_=(_:_:)-1eul6","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_=(_:_:)-1l9pm","title":"static func >= (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_=(_:_:)-5267s","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_=(_:_:)-7wd72","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/_=(_:_:)-8gro9","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal64\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal64\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(_:)-2sv61","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(_:)-62yz7","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(_:rounding:)","title":"init<Source>(Source, rounding: RoundingRule)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(exactly:)-2k6yv","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(exactly:)-399z5","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(exactly:)-85q94","title":"init?<Source>(exactly: Source)","type":"init"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(signof:magnitudeof:)","title":"init(signOf: Self, magnitudeOf: Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/decade","title":"var decade: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/significanddigitcount","title":"var significandDigitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/radix","title":"static var radix: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/random(in:)-3rnay","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/random(in:)-o4hj","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/random(in:using:)-5d0kv","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/random(in:using:)-5i07b","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal64\/decimalfloatingpoint-implementations","title":"DecimalFloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(sign:exponentbitpattern:significandbitpattern:)","title":"init(sign: Sign, exponentBitPattern: Int, significandBitPattern: RawSignificand)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/decimaltype-implementations","title":"DecimalType Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/==(_:_:)-29d87","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/==(_:_:)-4xl8m","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/==(_:_:)-51lv7","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/decimal64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/*(_:_:)","title":"static func * (`Self`, `Self`) -> Decimal64","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/\/(_:_:)","title":"static func \/ (`Self`, `Self`) -> Decimal64","type":"op"},{"path":"\/documentation\/bigdecimal\/decimal64\/\/=(_:_:)","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(sign:exponent:significand:)","title":"init(sign: Sign, exponent: Int, significand: `Self`)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/nextup","title":"var nextUp: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/significand","title":"var significand: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/ulp","title":"var ulp: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/addproduct(_:_:)","title":"func addProduct(`Self`, `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: `Self`)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/isequal(to:)","title":"func isEqual(to: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/isless(than:)","title":"func isLess(than: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/negate()-8m6ks","title":"func negate()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/round(_:)","title":"func round(RoundingRule)","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/infinity","title":"static var infinity: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/leastnormalmagnitude","title":"static var leastNormalMagnitude: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/pi","title":"static var pi: `Self`","type":"property"},{"path":"\/documentation\/bigdecimal\/decimal64\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/maximum(_:_:)","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/minimum(_:_:)","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal64\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/init(_:)-458ul","title":"init?(String)","type":"init"}],"path":"\/documentation\/bigdecimal\/decimal64\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/bigdecimal\/decimal64\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/-(_:)","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/negate()-672w4","title":"func negate()","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal64\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/decimal64\/advanced(by:)","title":"func advanced(by: `Self`) -> Decimal64","type":"method"},{"path":"\/documentation\/bigdecimal\/decimal64\/distance(to:)","title":"func distance(to: `Self`) -> Decimal64","type":"method"}],"path":"\/documentation\/bigdecimal\/decimal64\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/decimal64","title":"Decimal64","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/expcalculator\/factors","title":"var factors: [BFraction]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/expcalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/expcalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/instance","title":"static var instance: ExpCalculator","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/expcalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/expcalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/expcalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/expcalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/expcalculator","title":"ExpCalculator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/powerniterator\/calculatenextpower()","title":"func calculateNextPower()","type":"method"},{"path":"\/documentation\/bigdecimal\/powerniterator\/getcurrentpower()","title":"func getCurrentPower() -> BigDecimal","type":"method"}],"path":"\/documentation\/bigdecimal\/powerniterator","title":"PowerNIterator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/powertwoniterator\/calculatenextpower()","title":"func calculateNextPower()","type":"method"},{"path":"\/documentation\/bigdecimal\/powertwoniterator\/getcurrentpower()","title":"func getCurrentPower() -> BigDecimal","type":"method"}],"path":"\/documentation\/bigdecimal\/powertwoniterator","title":"PowerTwoNIterator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/powertwonplusoneiterator\/calculatenextpower()","title":"func calculateNextPower()","type":"method"},{"path":"\/documentation\/bigdecimal\/powertwonplusoneiterator\/getcurrentpower()","title":"func getCurrentPower() -> BigDecimal","type":"method"}],"path":"\/documentation\/bigdecimal\/powertwonplusoneiterator","title":"PowerTwoNPlusOneIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/rounding\/init(_:_:)","title":"init(RoundingRule, Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/rounding\/mode","title":"var mode: RoundingRule","type":"property"},{"path":"\/documentation\/bigdecimal\/rounding\/precision","title":"var precision: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/rounding\/round(_:)","title":"func round(BigDecimal) -> BigDecimal","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/rounding\/decimal128","title":"static let decimal128: Rounding","type":"property"},{"path":"\/documentation\/bigdecimal\/rounding\/decimal32","title":"static let decimal32: Rounding","type":"property"},{"path":"\/documentation\/bigdecimal\/rounding\/decimal64","title":"static let decimal64: Rounding","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/rounding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/rounding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/rounding","title":"Rounding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sincalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sincalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/sincalculator\/factors","title":"var factors: [BigRational]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sincalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/sincalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/sincalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sincalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sincalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/sincalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/sincalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/sincalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/sincalculator","title":"SinCalculator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/calculateinpairs","title":"var calculateInPairs: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/factors","title":"var factors: [BigRational]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/calculatenextfactor()","title":"func calculateNextFactor()","type":"method"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/createpoweriterator(_:_:)","title":"func createPowerIterator(BigDecimal, Rounding) -> PowerIterator","type":"method"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/getcurrentfactor()","title":"func getCurrentFactor() -> BigRational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/addfactor(_:)","title":"func addFactor(BigInt.BFraction)","type":"method"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/calculate(_:_:)","title":"func calculate(BigDecimal, Rounding) -> BigDecimal","type":"method"},{"path":"\/documentation\/bigdecimal\/sinhcalculator\/getfactor(_:)","title":"func getFactor(Int) -> BigInt.BFraction","type":"method"}],"path":"\/documentation\/bigdecimal\/sinhcalculator\/seriescalculator-implementations","title":"SeriesCalculator Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/sinhcalculator","title":"SinhCalculator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/haserror","title":"var hasError: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/hasinfo","title":"var hasInfo: Bool","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/clamped","title":"static let clamped: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/clearflags","title":"static let clearFlags: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/conversionsyntax","title":"static let conversionSyntax: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/divisionbyzero","title":"static let divisionByZero: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/divisionimpossible","title":"static let divisionImpossible: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/divisionundefined","title":"static let divisionUndefined: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/errorflags","title":"static let errorFlags: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/inexact","title":"static let inexact: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/informationflags","title":"static let informationFlags: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/insufficientstorage","title":"static let insufficientStorage: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/invalidcontext","title":"static let invalidContext: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/invalidoperation","title":"static let invalidOperation: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/lostdigits","title":"static let lostDigits: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/overflow","title":"static let overflow: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/rounded","title":"static let rounded: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/subnormal","title":"static let subnormal: Status","type":"property"},{"path":"\/documentation\/bigdecimal\/status\/underflow","title":"static let underflow: Status","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigdecimal\/status\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/bigdecimal\/status\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/bigdecimal\/status\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/status\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/bigdecimal\/status\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/bigdecimal\/status\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/bigdecimal\/status","title":"Status","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigdecimal\/intrange","title":"IntRange","type":"typealias"},{"path":"\/documentation\/bigdecimal\/roundingrule","title":"RoundingRule","type":"typealias"},{"path":"\/documentation\/bigdecimal\/sign","title":"Sign","type":"typealias"}],"path":"\/documentation\/bigdecimal","title":"BigDecimal","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}