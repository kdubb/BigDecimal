//
//  TestAsString.swift
//  BigDecimalTests
//
//  Created by Leif Ibsen on 04/10/2022.
//

import XCTest
@testable import BigDecimal

final class TestAsString: XCTestCase {

    override func setUpWithError() throws {
        BigDecimal.nanFlag = false
    }

    override func tearDownWithError() throws {
        XCTAssertFalse(BigDecimal.nanFlag)
    }

    struct test {

        let x: String
        let engRes: String
        let sciRes: String

        init(_ x: String, _ engRes: String, _ sciRes: String) {
            self.x = x
            self.engRes = engRes
            self.sciRes = sciRes
        }
    }
    
    let tests1: [test] = [
        test("0.000000000", "0E-9", "0E-9"),
        test("0.00000000", "0.00E-6", "0E-8"),
        test("0.0000000", "0.0E-6", "0E-7"),
        test("0.000000", "0.000000", "0.000000"),
        test("0.00000", "0.00000", "0.00000"),
        test("0.0000", "0.0000", "0.0000"),
        test("0.000", "0.000", "0.000"),
        test("0.00", "0.00", "0.00"),
        test("0.0", "0.0", "0.0"),
        test(".0", "0.0", "0.0"),
        test("0.", "0", "0"),
        test("-.0", "-0.0", "-0.0"),
        test("-0.", "-0", "-0"),
        test("-0.0", "-0.0", "-0.0"),
        test("-0.00", "-0.00", "-0.00"),
        test("-0.000", "-0.000", "-0.000"),
        test("-0.0000", "-0.0000", "-0.0000"),
        test("-0.00000", "-0.00000", "-0.00000"),
        test("-0.000000", "-0.000000", "-0.000000"),
        test("-0.0000000", "-0.0E-6", "-0E-7"),
        test("-0.00000000", "-0.00E-6", "-0E-8"),
        test("-0.000000000", "-0E-9", "-0E-9"),
        test("0.00E+0", "0.00", "0.00"),
        test("0.00E+1", "0.0", "0.0"),
        test("0.00E+2", "0", "0"),
        test("0.00E+3", "0.00E+3", "0E+1"),
        test("0.00E+4", "0.0E+3", "0E+2"),
        test("0.00E+5", "0E+3", "0E+3"),
        test("0.00E+6", "0.00E+6", "0E+4"),
        test("0.00E+7", "0.0E+6", "0E+5"),
        test("0.00E+8", "0E+6", "0E+6"),
        test("0.00E+9", "0.00E+9", "0E+7"),
        test("0.0E+0", "0.0", "0.0"),
        test("0.0E+1", "0", "0"),
        test("0.0E+2", "0.00E+3", "0E+1"),
        test("0.0E+3", "0.0E+3", "0E+2"),
        test("0.0E+4", "0E+3", "0E+3"),
        test("0.0E+5", "0.00E+6", "0E+4"),
        test("0.0E+6", "0.0E+6", "0E+5"),
        test("0.0E+7", "0E+6", "0E+6"),
        test("0.0E+8", "0.00E+9", "0E+7"),
        test("0.0E+9", "0.0E+9", "0E+8"),
        test("0E+0", "0", "0"),
        test("0E+1", "0.00E+3", "0E+1"),
        test("0E+2", "0.0E+3", "0E+2"),
        test("0E+3", "0E+3", "0E+3"),
        test("0E+4", "0.00E+6", "0E+4"),
        test("0E+5", "0.0E+6", "0E+5"),
        test("0E+6", "0E+6", "0E+6"),
        test("0E+7", "0.00E+9", "0E+7"),
        test("0E+8", "0.0E+9", "0E+8"),
        test("0E+9", "0E+9", "0E+9"),
        test("0.0E-0", "0.0", "0.0"),
        test("0.0E-1", "0.00", "0.00"),
        test("0.0E-2", "0.000", "0.000"),
        test("0.0E-3", "0.0000", "0.0000"),
        test("0.0E-4", "0.00000", "0.00000"),
        test("0.0E-5", "0.000000", "0.000000"),
        test("0.0E-6", "0.0E-6", "0E-7"),
        test("0.0E-7", "0.00E-6", "0E-8"),
        test("0.0E-8", "0E-9", "0E-9"),
        test("0.0E-9", "0.0E-9", "0E-10"),
        test("0.00E-0", "0.00", "0.00"),
        test("0.00E-1", "0.000", "0.000"),
        test("0.00E-2", "0.0000", "0.0000"),
        test("0.00E-3", "0.00000", "0.00000"),
        test("0.00E-4", "0.000000", "0.000000"),
        test("0.00E-5", "0.0E-6", "0E-7"),
        test("0.00E-6", "0.00E-6", "0E-8"),
        test("0.00E-7", "0E-9", "0E-9"),
        test("0.00E-8", "0.0E-9", "0E-10"),
        test("0.00E-9", "0.00E-9", "0E-11"),
    ]

    func test1() throws {
        for t in tests1 {
            XCTAssertEqual(BigDecimal(t.x).asString(), t.sciRes)
            XCTAssertEqual(BigDecimal(t.x).asString(.engineering), t.engRes)
        }
    }

    let tests2: [test] = [
        test("10e12", "10E+12", "1.0E+13"),
        test("10e11", "1.0E+12", "1.0E+12"),
        test("10e10", "100E+9", "1.0E+11"),
        test("10e9", "10E+9", "1.0E+10"),
        test("10e8", "1.0E+9", "1.0E+9"),
        test("10e7", "100E+6", "1.0E+8"),
        test("10e6", "10E+6", "1.0E+7"),
        test("10e5", "1.0E+6", "1.0E+6"),
        test("10e4", "100E+3", "1.0E+5"),
        test("10e3", "10E+3", "1.0E+4"),
        test("10e2", "1.0E+3", "1.0E+3"),
        test("10e1", "100", "1.0E+2"),
        test("10e0", "10", "10"),
        test("10e-1", "1.0", "1.0"),
        test("10e-2", "0.10", "0.10"),
        test("10e-3", "0.010", "0.010"),
        test("10e-4", "0.0010", "0.0010"),
        test("10e-5", "0.00010", "0.00010"),
        test("10e-6", "0.000010", "0.000010"),
        test("10e-7", "0.0000010", "0.0000010"),
        test("10e-8", "100E-9", "1.0E-7"),
        test("10e-9", "10E-9", "1.0E-8"),
        test("10e-10", "1.0E-9", "1.0E-9"),
        test("10e-11", "100E-12", "1.0E-10"),
        test("10e-12", "10E-12", "1.0E-11"),
        test("10e-13", "1.0E-12", "1.0E-12"),
    ]
    
    func test2() throws {
        for t in tests2 {
            XCTAssertEqual(BigDecimal(t.x).asString(), t.sciRes)
            XCTAssertEqual(BigDecimal(t.x).asString(.engineering), t.engRes)
        }
    }
    
    let tests3: [test] = [
        test("100", "100", "100"),
        test("1000", "1000", "1000"),
        test("999.9", "999.9", "999.9"),
        test("1000.0", "1000.0", "1000.0"),
        test("1000.1", "1000.1", "1000.1"),
        test("10000", "10000", "10000"),
        test("100000", "100000", "100000"),
        test("1000000", "1000000", "1000000"),
        test("10000000", "10000000", "10000000"),
        test("10000000000000000", "10.00000000000000E+15", "1.000000000000000E+16"),
        test("10000000000000001", "10.00000000000000E+15", "1.000000000000000E+16"),
        test("10000000000000003", "10.00000000000000E+15", "1.000000000000000E+16"),
        test("10000000000000005", "10.00000000000001E+15", "1.000000000000001E+16"),
        test("100000000000000050", "100.0000000000001E+15", "1.000000000000001E+17"),
        test("10000000000000009", "10.00000000000001E+15", "1.000000000000001E+16"),
        test("100000000000000000", "100.0000000000000E+15", "1.000000000000000E+17"),
        test("100000000000000003", "100.0000000000000E+15", "1.000000000000000E+17"),
        test("100000000000000005", "100.0000000000000E+15", "1.000000000000000E+17"),
        test("100000000000000009", "100.0000000000000E+15", "1.000000000000000E+17"),
        test("1000000000000000000", "1.000000000000000E+18", "1.000000000000000E+18"),
        test("1000000000000000300", "1.000000000000000E+18", "1.000000000000000E+18"),
        test("1000000000000000500", "1.000000000000001E+18", "1.000000000000001E+18"),
        test("1000000000000000900", "1.000000000000001E+18", "1.000000000000001E+18"),
        test("10000000000000000000", "10.00000000000000E+18", "1.000000000000000E+19"),
        test("10000000000000003000", "10.00000000000000E+18", "1.000000000000000E+19"),
        test("10000000000000005000", "10.00000000000001E+18", "1.000000000000001E+19"),
        test("10000000000000009000", "10.00000000000001E+18", "1.000000000000001E+19"),
    ]
    
    func test3() throws {
        let rnd = Rounding(.toNearestOrAwayFromZero, 16)
        for t in tests3 {
            XCTAssertEqual(rnd.round(BigDecimal(t.x)).asString(), t.sciRes)
            XCTAssertEqual(rnd.round(BigDecimal(t.x)).asString(.engineering), t.engRes)
        }
    }
  
  func testPerformanceBigDecimalFromString() {
    // UInt128 from String is 39X faster than UInt128 from Gerber
    self.measure {
      for _ in 1...1000 {
        let _ = BigDecimal("123456789012345678901234567890")
      }
    }
  }
  
  func testPerformanceBigDecimalToString() {
    // UInt128 to String is 23X faster than Apple's version
    let n = BigDecimal(1234).pow(20)
    self.measure {
      for _ in 1...1000 {
        let _ = n.asString()
      }
    }
    print(n)
  }

    let tests4: [test] = [
        test("7E12", "7E+12", "7E+12"),
        test("7E11", "700E+9", "7E+11"),
        test("7E10", "70E+9", "7E+10"),
        test("7E9", "7E+9", "7E+9"),
        test("7E8", "700E+6", "7E+8"),
        test("7E7", "70E+6", "7E+7"),
        test("7E6", "7E+6", "7E+6"),
        test("7E5", "700E+3", "7E+5"),
        test("7E4", "70E+3", "7E+4"),
        test("7E3", "7E+3", "7E+3"),
        test("7E2", "700", "7E+2"),
        test("7E1", "70", "7E+1"),
        test("7E0", "7", "7"),
        test("7E-1", "0.7", "0.7"),
        test("7E-2", "0.07", "0.07"),
        test("7E-3", "0.007", "0.007"),
        test("7E-4", "0.0007", "0.0007"),
        test("7E-5", "0.00007", "0.00007"),
        test("7E-6", "0.000007", "0.000007"),
        test("7E-7", "700E-9", "7E-7"),
        test("7E-8", "70E-9", "7E-8"),
        test("7E-9", "7E-9", "7E-9"),
        test("7E-10", "700E-12", "7E-10"),
        test("7E-11", "70E-12", "7E-11"),
        test("7E-12", "7E-12", "7E-12"),
        test("7E-13", "700E-15", "7E-13"),
    ]
    
    func test4() throws {
        for t in tests4 {
            XCTAssertEqual(BigDecimal(t.x).asString(), t.sciRes)
            XCTAssertEqual(BigDecimal(t.x).asString(.engineering), t.engRes)
        }
    }

}
